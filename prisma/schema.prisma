// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Vehicle {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  registration String?  @unique
  carMark      String?
  carModel     String?
  carImage     String?
  prevDrivers  String[] //convert driver user id to string and check for duplicity before pushing to array
  mileage      Int?

  currentDriver Driver? @relation(fields: [driverId], references: [id])
  driverId      String? @db.ObjectId
  currentFirm   Firm?   @relation(fields: [firmId], references: [id])
  firmId        String? @db.ObjectId
}

model Firm {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  firmName    String?
  firmTag     String?  @default(" 'Kamień, który się toczy, mech nie zbiera' -  Przysłowie")
  aboutFirm   String?  @default(" 'Sztuka nie polega na robieniu czegoś szybko, ale na robieniu czegoś na czas.' -  Jean Tinguely")
  firmSocials String[]
  balance     Int?     @default(0)

  owner   Driver? @relation(fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ownerId String? @unique @db.ObjectId

  drivers      Driver[]            @relation("drivers")
  vehicles     Vehicle[]
  joinRequests JoinRequest[]
  settlements  Settlement[]
  comKms       CompanyKilometers[]
}

model Driver {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  username           String?  @unique
  email              String?  @unique
  password           String?
  image              String?
  firmsWorked        String[] //convert firm user id to string and check for duplicity before pushing to array
  previousVehicles   String[]
  balance            Int?
  totFuel            Int?
  totKms             Int?
  deliveries         Int?
  avgFuelConsumption Int?
  seniority          String?

  role Role @default(DRIVER)

  vehicle           Vehicle[]
  kilometerMonths   KilometerMonth[]
  companyKilometers CompanyKilometers?
  settlements       Settlement[]
  firmOwned         Firm?
  joinRequest       JoinRequest?

  currentFirm Firm?   @relation(fields: [firmId], references: [id], name: "drivers")
  firmId      String? @db.ObjectId

  currentLocation Location? @relation(fields: [locationId], references: [id])
  locationId      String?   @db.ObjectId
}

model JoinRequest {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  status Boolean?

  requester   Driver? @relation(fields: [requesterId], references: [id])
  requesterId String? @unique @db.ObjectId

  toFirm Firm?   @relation(fields: [firmId], references: [id])
  firmId String? @db.ObjectId
}

model Location {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  country String?
  city    String?
  zipCode String?

  drivers     Driver[]
  settlements Settlement[]
}

model StartLocation {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  country String?
  city    String?
  zipCode String?

  settlements Settlement[]
}

model KilometerMonth {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  month    String?
  year     String?
  kms      Int?
  driver   Driver? @relation(fields: [driverId], references: [id], onDelete: Cascade)
  driverId String? @db.ObjectId
}

model CompanyKilometers {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  kms      Int?
  driver   Driver? @relation(fields: [driverId], references: [id], onDelete: Cascade)
  driverId String? @unique @db.ObjectId
  firm     Firm?   @relation(fields: [firmId], references: [id], onDelete: Cascade)
  firmId   String? @db.ObjectId
}

model Settlement {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  beginImage                String?
  endImage                  String?
  distanceCoveredSettlement Int?
  fuelUsed                  Int?
  avgFuelConsumption        Float?
  litersRefueled            Int?
  deliveryTime              Int? //mins
  expensesSpent             Int?
  weight                    Int?
  ferries                   Int?
  highways                  String[]
  products                  String[]
  approvalStatus            Boolean
  misc                      String[]

  startLocation   StartLocation? @relation(fields: [startLocationId], references: [id], onDelete: Cascade)
  startLocationId String?        @db.ObjectId
  endLocation     Location?      @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId      String?        @db.ObjectId

  driver   Driver? @relation(fields: [driverId], references: [id], onDelete: Cascade)
  driverId String? @db.ObjectId
  Firm     Firm?   @relation(fields: [firmId], references: [id], onDelete: Cascade)
  firmId   String? @db.ObjectId
}

enum Role {
  DRIVER
  SPEDYTOR
  ZARZAD
}

//npx prisma generate
//npx prisma studio
//npx prisma db push
//npx prisma format
